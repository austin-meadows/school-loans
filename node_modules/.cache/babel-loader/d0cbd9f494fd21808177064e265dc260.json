{"remainingRequest":"/Users/slowpoke/Git/school-loans/.yarn/$$virtual/babel-loader-virtual-89c64d8d22/0/cache/babel-loader-npm-8.2.2-b4e600c2c5-362bb71573.zip/node_modules/babel-loader/lib/index.js!/Users/slowpoke/Git/school-loans/.yarn/$$virtual/eslint-loader-virtual-3c8d3f2dac/0/cache/eslint-loader-npm-2.2.1-c132910c93-6dac586f5e.zip/node_modules/eslint-loader/index.js??ref--13-0!/Users/slowpoke/Git/school-loans/src/utils/js/validate.js","dependencies":[{"path":"/Users/slowpoke/Git/school-loans/src/utils/js/validate.js","mtime":1607185585360},{"path":"/Users/slowpoke/Git/school-loans/.yarn/$$virtual/cache-loader-virtual-a65114d6d3/0/cache/cache-loader-npm-4.1.0-82c3da90d8-2e369f72e3.zip/node_modules/cache-loader/dist/cjs.js","mtime":315532800000},{"path":"/Users/slowpoke/Git/school-loans/.yarn/$$virtual/babel-loader-virtual-89c64d8d22/0/cache/babel-loader-npm-8.2.2-b4e600c2c5-362bb71573.zip/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/slowpoke/Git/school-loans/.yarn/$$virtual/eslint-loader-virtual-3c8d3f2dac/0/cache/eslint-loader-npm-2.2.1-c132910c93-6dac586f5e.zip/node_modules/eslint-loader/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlZ2V4ID0gewogIGVtYWlsOiAvW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pPy8KfTsgLy8gVGFrZXMgaW5wdXQgdGV4dCBhbmQgYSB0eXBlIGFuZCByZXR1cm5zIHRydWUgaWYgaXQgbWF0Y2hlcywgZmFsc2Ugb3RoZXJ3aXNlLgovLyBWYWxpZCBpbnB1dCB0eXBlczoKLy8gIC0gImVtYWlsIgoKZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICgpIHsKICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogIiI7CiAgdmFyIGlucHV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAiIjsKICByZXR1cm4gdHlwZSA/IHJlZ2V4W3R5cGVdLnRlc3QoaW5wdXQpIDogZmFsc2U7Cn0pOw=="},{"version":3,"sources":["/Users/slowpoke/Git/school-loans/src/utils/js/validate.js"],"names":["regex","email","type","input","test"],"mappings":"AAAA,IAAMA,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE;AADK,CAAd,C,CAGA;AACA;AACA;;AACA,gBAAe;AAAA,MAACC,IAAD,uEAAQ,EAAR;AAAA,MAAYC,KAAZ,uEAAoB,EAApB;AAAA,SAA4BD,IAAI,GAAGF,KAAK,CAACE,IAAD,CAAL,CAAYE,IAAZ,CAAiBD,KAAjB,CAAH,GAA6B,KAA7D;AAAA,CAAf","sourcesContent":["const regex = {\n  email: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/,\n};\n// Takes input text and a type and returns true if it matches, false otherwise.\n// Valid input types:\n//  - \"email\"\nexport default (type = \"\", input = \"\") => (type ? regex[type].test(input) : false);\n"]}]}